# Knative Service for Preprocessing
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: preprocess-service      # Name of the service for preprocessing
  namespace: ollama             # Namespace where the service is deployed
spec:
  template:
    metadata:
      annotations:
        autoscaling.knative.dev/target: "1"  # Target concurrency: 1 request per pod
        autoscaling.knative.dev/minScale: "1" # Minimum number of pods to maintain
        autoscaling.knative.dev/maxScale: "5" # Maximum number of pods to scale to
      labels:
        sidecar.istio.io/inject: "false"     # Disable Istio sidecar injection (optional)
    spec:
      containers:
        - image: artifact-registry/preprocess-service
          imagePullPolicy: Always  # Always pull the latest image on container startup
          
          env:
            # Environment variable for Redis service connection
            - name: REDIS_HOST      # Host for Redis (should match Redis service name in Kubernetes)
              value: "redis-service"

          ports:
            - containerPort: 8080   # Expose the container on port 8080

          resources:
            # Resource limits define the maximum CPU and memory the container can use
            limits:
              cpu: "500m"           # Limit CPU usage to 500 millicores
              memory: "256Mi"       # Limit memory usage to 256Mi

          # Readiness Probe: Ensures the service is ready to receive traffic
          readinessProbe:
            httpGet:
              path: /                # Health check on root path
              port: 8080
            initialDelaySeconds: 15   # Wait 15 seconds before the first check
            periodSeconds: 10         # Check every 10 seconds
            failureThreshold: 3       # Mark the pod as unhealthy after 3 failed checks

          # Liveness Probe: Ensures the container is still running and responsive
          livenessProbe:
            httpGet:
              path: /                # Health check on root path
              port: 8080
            initialDelaySeconds: 20   # Wait 20 seconds before starting the checks
            periodSeconds: 10         # Check every 10 seconds
            failureThreshold: 3       # Restart the pod after 3 failed checks

          # Security Context: Ensures the container runs securely without root privileges
          securityContext:
            allowPrivilegeEscalation: false  # Prevent privilege escalation
            capabilities:
              drop:
                - ALL               # Drop all capabilities for better security
            runAsUser: 1337          # Set the user ID (non-root)
            runAsGroup: 1337         # Set the group ID
            runAsNonRoot: true       # Ensure the container runs as a non-root user
            seccompProfile:
              type: RuntimeDefault   # Use the default seccomp profile for additional security
